{
  "source": "../api/http.md",
  "modules": [
    {
      "textRaw": "HTTP",
      "name": "http",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>http模块提供一些进行http请求的函数。</p>\n",
      "methods": [
        {
          "textRaw": "http.get(url[, options, callback])",
          "type": "method",
          "name": "get",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。 ",
                  "name": "url",
                  "type": "string",
                  "desc": "请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。"
                },
                {
                  "textRaw": "`options` {Object} 请求选项。参见[http.request()][]。 ",
                  "name": "options",
                  "type": "Object",
                  "desc": "请求选项。参见[http.request()][]。",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} 回调函数，可选，其参数是一个[Response][]对象。如果不加回调函数，则该请求将阻塞、同步地执行。 ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "回调函数，可选，其参数是一个[Response][]对象。如果不加回调函数，则该请求将阻塞、同步地执行。",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>对地址url进行一次HTTP GET 请求。如果没有回调函数，则在请求完成或失败时返回此次请求的响应(参见[Response][])。</p>\n<p>最简单GET请求如下:</p>\n<pre><code>console.show();\nvar r = http.get(&quot;www.baidu.com&quot;);\nlog(&quot;code = &quot; + r.statusCode);\nlog(&quot;html = &quot; + r.body.string());\n</code></pre><p>采用回调形式的GET请求如下：</p>\n<pre><code>console.show();\nhttp.get(&quot;www.baidu.com&quot;, {}, function(res, err){\n    if(err){\n        console.error(err);\n        return;\n    }\n    log(&quot;code = &quot; + res.statusCode);\n    log(&quot;html = &quot; + res.body.string());\n});\n</code></pre><p>如果要增加HTTP头部信息，则在options参数中添加，例如：</p>\n<pre><code>console.show();\nvar r = http.get(&quot;www.baidu.com&quot;, {\n    headers: {\n        &#39;Accept-Language&#39;: &#39;zh-cn,zh;q=0.5&#39;,\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0(Macintosh;IntelMacOSX10_7_0)AppleWebKit/535.11(KHTML,likeGecko)Chrome/17.0.963.56Safari/535.11&#39;\n    }\n});\nlog(&quot;code = &quot; + r.statusCode);\nlog(&quot;html = &quot; + r.body.string());\n</code></pre><p>一个请求天气并解析返回的天气JSON结果的例子如下：</p>\n<pre><code>var city = &quot;广州&quot;;\nvar res = http.get(&quot;http://www.sojson.com/open/api/weather/json.shtml?city=&quot; + city);\nif(res.statusCode != 200){\n    toast(&quot;请求失败: &quot; + res.statusCode + &quot; &quot; + res.statusMessage);\n}else{\n    var weather = res.body.json();\n    log(weather);\n    toast(util.format(&quot;温度: %s 湿度: %s 空气质量: %s&quot;, weather.data.wendu,\n        weather.data.shidu, weather.quality));\n}\n</code></pre>"
        },
        {
          "textRaw": "http.post(url, data[, options, callback])",
          "type": "method",
          "name": "post",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。 ",
                  "name": "url",
                  "type": "string",
                  "desc": "请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。"
                },
                {
                  "textRaw": "`data` {string} | {Object} POST数据。 ",
                  "name": "data",
                  "type": "string",
                  "desc": "| {Object} POST数据。"
                },
                {
                  "textRaw": "`options` {Object} 请求选项。 ",
                  "name": "options",
                  "type": "Object",
                  "desc": "请求选项。",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} 回调，其参数是一个[Response][]对象。如果不加回调参数，则该请求将阻塞、同步地执行。 ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "回调，其参数是一个[Response][]对象。如果不加回调参数，则该请求将阻塞、同步地执行。",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                },
                {
                  "name": "data"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>对地址url进行一次HTTP POST 请求。如果没有回调函数，则在请求完成或失败时返回此次请求的响应(参见[Response][])。</p>\n<p>其中POST数据可以是字符串或键值对。具体含义取决于options.contentType的值。默认为&quot;application/x-www-form-urlencoded&quot;(表单提交), 这种方式是JQuery的ajax函数的默认方式。</p>\n<p>一个模拟表单提交登录淘宝的例子如下:</p>\n<pre><code>var url = &quot;https://login.taobao.com/member/login.jhtml&quot;;\nvar username = &quot;你的用户名&quot;;\nvar password = &quot;你的密码&quot;;\nvar res = http.post(url, {\n    &quot;TPL_username&quot;: username,\n    &quot;TPL_password&quot;: password\n});\nvar html = res.body.string();\nif(html.contains(&quot;页面跳转中&quot;)){\n    toast(&quot;登录成功&quot;);\n}else{\n    toast(&quot;登录失败&quot;);\n}\n</code></pre>"
        },
        {
          "textRaw": "http.postJson(url[, data, options, callback])",
          "type": "method",
          "name": "postJson",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。 ",
                  "name": "url",
                  "type": "string",
                  "desc": "请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。"
                },
                {
                  "textRaw": "`data` {Object} POST数据。 ",
                  "name": "data",
                  "type": "Object",
                  "desc": "POST数据。",
                  "optional": true
                },
                {
                  "textRaw": "`options` {Object} 请求选项。 ",
                  "name": "options",
                  "type": "Object",
                  "desc": "请求选项。",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} 回调，其参数是一个[Response][]对象。如果不加回调参数，则该请求将阻塞、同步地执行。 ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "回调，其参数是一个[Response][]对象。如果不加回调参数，则该请求将阻塞、同步地执行。",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                },
                {
                  "name": "data",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>以JSON格式向目标Url发起POST请求。如果没有回调函数，则在请求完成或失败时返回此次请求的响应(参见[Response][])。</p>\n<p>JSON格式指的是，将会调用<code>JSON.stringify()</code>把data对象转换为JSON字符串，并在HTTP头部信息中把&quot;Content-Type&quot;属性置为&quot;application/json&quot;。这种方式是AngularJS的ajax函数的默认方式。</p>\n<p>一个调用图灵机器人接口的例子如下：</p>\n<pre><code>var url = &quot;http://www.tuling123.com/openapi/api&quot;;\nr = http.postJson(url, {\n    key: &quot;65458a5df537443b89b31f1c03202a80&quot;,\n    info: &quot;你好啊&quot;,\n    userid: &quot;1&quot;,\n});\ntoastLog(r.body.string());\n</code></pre>"
        },
        {
          "textRaw": "http.postMultipart(url, files[, options, callback])",
          "type": "method",
          "name": "postMultipart",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。 ",
                  "name": "url",
                  "type": "string",
                  "desc": "请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。"
                },
                {
                  "textRaw": "`files` {Object} POST数据。 ",
                  "name": "files",
                  "type": "Object",
                  "desc": "POST数据。"
                },
                {
                  "textRaw": "`options` {Object} 请求选项。 ",
                  "name": "options",
                  "type": "Object",
                  "desc": "请求选项。",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} 回调，其参数是一个`Response`对象。如果不加回调参数，则该请求将阻塞、同步地执行。 ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "回调，其参数是一个`Response`对象。如果不加回调参数，则该请求将阻塞、同步地执行。",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                },
                {
                  "name": "files"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>向目标地址发起类型为multipart/form-data的请求（通常用于文件上传等), 其中files参数是{name1: value1, name2: value2, ...}的键值对，value的格式可以是以下几种情况：</p>\n<ol>\n<li><code>string</code></li>\n<li>文件类型，即open()返回的类型</li>\n<li>[fileName, filePath]</li>\n<li>[fileName, mimeType, filePath]</li>\n</ol>\n<p>其中1属于非文件参数，2、3、4为文件参数。举个例子，最简单的文件上传的请求为：</p>\n<pre><code>var res = http.postMultipart(url, {\n    file: open(&quot;/sdcard/1.txt&quot;)\n});\nlog(res.body.string());\n</code></pre><p>如果使用格式2，则代码为</p>\n<pre><code>var res = http.postMultipart(url, {\n    file: [&quot;1.txt&quot;, &quot;/sdcard/1.txt&quot;]\n});\nlog(res.body.string());\n</code></pre><p>如果使用格式3，则代码为</p>\n<pre><code>var res = http.postMultipart(url, {\n    file: [&quot;1.txt&quot;, &quot;text/plain&quot;, &quot;/sdcard/1.txt&quot;]\n});\nlog(res.body.string());\n</code></pre><p>如果使用格式2的同时要附带非文件参数&quot;appId=abcdefghijk&quot;，则为:</p>\n<pre><code>var res = http.postMultipart(url, {\n    appId: &quot;adcdefghijk&quot;,\n    file: open(&quot;/sdcard/1.txt&quot;)\n});\nlog(res.body.string());\n</code></pre>"
        },
        {
          "textRaw": "http.request(url[, options, callback])",
          "type": "method",
          "name": "request",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。 ",
                  "name": "url",
                  "type": "string",
                  "desc": "请求的URL地址，需要以\"http://\"或\"https://\"开头。如果url没有以\"http://\"开头，则默认为\"http://\"。"
                },
                {
                  "textRaw": "`options` {Object} 请求选项。参见[http.buildRequest()][]。 ",
                  "name": "options",
                  "type": "Object",
                  "desc": "请求选项。参见[http.buildRequest()][]。",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} 回调，其参数是一个[Response][]对象。如果不加回调参数，则该请求将阻塞、同步地执行。 ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "回调，其参数是一个[Response][]对象。如果不加回调参数，则该请求将阻塞、同步地执行。",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>对目标地址url发起一次HTTP请求。如果没有回调函数，则在请求完成或失败时返回此次请求的响应(参见[Response][])。</p>\n<p>选项options可以包含以下属性：</p>\n<ul>\n<li><code>headers</code> {Object} 键值对形式的HTTP头部信息。有关HTTP头部信息，参见<a href=\"http://www.runoob.com/http/http-header-fields.html\">菜鸟教程：HTTP响应头信息</a>。</li>\n<li><code>method</code> {string} HTTP请求方法。包括&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELET&quot;, &quot;PATCH&quot;。</li>\n<li><code>contentType</code> {string} HTTP头部信息中的&quot;Content-Type&quot;, 表示HTTP请求的内容类型。例如&quot;text/plain&quot;, &quot;application/json&quot;。更多信息参见<a href=\"http://www.runoob.com/http/http-content-type.html\">菜鸟教程：HTTP contentType</a>。</li>\n<li><code>body</code> {string} | {Array} | {Function} HTTP请求的内容。可以是一个字符串，也可以是一个字节数组；或者是一个以<a href=\"https://github.com/square/okio/blob/master/okio/src/main/java/okio/BufferedSink.java\">BufferedSink</a>为参数的函数。</li>\n</ul>\n<p>该函数是get, post, postJson等函数的基础函数。因此除非是PUT, DELET等请求，或者需要更高定制的HTTP请求，否则直接使用get, post, postJson等函数会更加方便。</p>\n"
        }
      ],
      "type": "module",
      "displayName": "HTTP"
    },
    {
      "textRaw": "Response",
      "name": "response",
      "desc": "<p>HTTP请求的响应。</p>\n",
      "properties": [
        {
          "textRaw": "`statusCode` {number} ",
          "type": "number",
          "name": "statusCode",
          "desc": "<p>当前响应的HTTP状态码。例如200(OK), 404(Not Found)等。</p>\n<p>有关HTTP状态码的信息，参见<a href=\"http://www.runoob.com/http/http-status-codes.html\">菜鸟教程：HTTP状态码</a>。</p>\n"
        },
        {
          "textRaw": "`statusMessage` {string}  ",
          "type": "string",
          "name": "statusMessage",
          "desc": "<p>当前响应的HTTP状态信息。例如&quot;OK&quot;, &quot;Bad Request&quot;, &quot;Forbidden&quot;。</p>\n<p>有关HTTP状态码的信息，参见<a href=\"http://www.runoob.com/http/http-status-codes.html\">菜鸟教程：HTTP状态码</a>。</p>\n<p>例子：</p>\n<pre><code>var res = http.get(&quot;www.baidu.com&quot;);\nif(res.statusCode &gt;= 200 &amp;&amp; res.statusCode &lt; 300){\n    toast(&quot;页面获取成功!&quot;);\n}else if(res.statusCode == 404){\n    toast(&quot;页面没找到哦...&quot;);\n}else{\n    toast(&quot;错误: &quot; + res.statusCode + &quot; &quot; + res.statusMessage);\n}\n</code></pre>"
        },
        {
          "textRaw": "`headers` {Object} ",
          "type": "Object",
          "name": "headers",
          "desc": "<p>当前响应的HTTP头部信息。该对象的键是响应头名称，值是各自的响应头值。 所有响应头名称都是小写的(吗)。</p>\n<p>有关HTTP头部信息，参见<a href=\"http://www.runoob.com/http/http-header-fields.html\">菜鸟教程：HTTP响应头信息</a>。</p>\n<p>例子:</p>\n<pre><code>console.show();\nvar res = http.get(&quot;www.qq.com&quot;);\nconsole.log(&quot;HTTP Headers:&quot;)\nfor(var headerName in res.headers){\n    console.log(&quot;%s: %s&quot;, headerName, res.headers[headerName]);\n}\n</code></pre>"
        },
        {
          "textRaw": "`body` {Object} ",
          "type": "Object",
          "name": "body",
          "desc": "<p>当前响应的内容。他有以下属性和函数：</p>\n<ul>\n<li>bytes() {Array} 以字节数组形式返回响应内容</li>\n<li>string() {string} 以字符串形式返回响应内容</li>\n<li>json() {Object} 把响应内容作为JSON格式的数据并调用JSON.parse，返回解析后的对象</li>\n<li>contentType {string} 当前响应的内容类型</li>\n</ul>\n"
        },
        {
          "textRaw": "`url` {number} 当前响应所对应的请求URL。 ",
          "type": "number",
          "name": "url",
          "desc": "当前响应所对应的请求URL。"
        },
        {
          "textRaw": "`method` {string} 当前响应所对应的HTTP请求的方法。例如\"GET\", \"POST\", \"PUT\"等。 ",
          "type": "string",
          "name": "method",
          "desc": "当前响应所对应的HTTP请求的方法。例如\"GET\", \"POST\", \"PUT\"等。"
        }
      ],
      "type": "module",
      "displayName": "Response"
    }
  ]
}