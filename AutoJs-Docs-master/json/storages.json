{
  "source": "../api/storages.md",
  "modules": [
    {
      "textRaw": "Storages",
      "name": "storages",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>storages模块提供了保存简单数据、用户配置等的支持。保存的数据除非应用被卸载或者被主动删除，否则会一直保留。</p>\n<p>storages支持<code>number</code>, <code>boolean</code>, <code>string</code>等数据类型以及把<code>Object</code>, <code>Array</code>用<code>JSON.stringify</code>序列化存取。</p>\n<p>storages保存的数据在脚本之间是共享的，任何脚本只要知道storage名称便可以获取到相应的数据，因此它不能用于敏感数据的储存。\nstorages无法像Web开发中LocalStorage一样提供根据域名独立的存储，因为脚本的路径随时可能改变。</p>\n",
      "methods": [
        {
          "textRaw": "storages.create(name)",
          "type": "method",
          "name": "create",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`name` {string} 本地存储名称 ",
                  "name": "name",
                  "type": "string",
                  "desc": "本地存储名称"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "name"
                }
              ]
            }
          ],
          "desc": "<p>创建一个本地存储并返回一个<code>Storage</code>对象。不同名称的本地存储的数据是隔开的，而相同名称的本地存储的数据是共享的。</p>\n<p>例如在一个脚本中，创建名称为ABC的存储并存入a=123:</p>\n<pre><code>var storage = storages.create(&quot;ABC&quot;);\nstorage.put(&quot;a&quot;, 123);\n</code></pre><p>而在另一个脚本中是可以获取到ABC以及a的值的：</p>\n<pre><code>var storage = storages.create(&quot;ABC&quot;);\nlog(&quot;a = &quot; + storage.get(&quot;a&quot;));\n</code></pre><p>因此，本地存储的名称比较重要，尽量使用含有域名、作者邮箱等唯一信息的名称来避免冲突，例如：</p>\n<pre><code>var storage = storages.create(&quot;2732014414@qq.com:ABC&quot;);\n</code></pre>"
        },
        {
          "textRaw": "storages.remove(name)",
          "type": "method",
          "name": "remove",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`name` {string} 本地存储名称 ",
                  "name": "name",
                  "type": "string",
                  "desc": "本地存储名称"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "name"
                }
              ]
            }
          ],
          "desc": "<p>删除一个本地存储以及他的全部数据。如果该存储不存在，返回false；否则返回true。</p>\n"
        }
      ],
      "type": "module",
      "displayName": "Storages"
    },
    {
      "textRaw": "Storages",
      "name": "storages",
      "methods": [
        {
          "textRaw": "Storage.get(key[, defaultValue])",
          "type": "method",
          "name": "get",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} 键值 ",
                  "name": "key",
                  "type": "string",
                  "desc": "键值"
                },
                {
                  "textRaw": "`defaultValue` {any} 可选，默认值 ",
                  "name": "defaultValue",
                  "type": "any",
                  "desc": "可选，默认值",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                },
                {
                  "name": "defaultValue",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>从本地存储中取出键值为key的数据并返回。</p>\n<p>如果该存储中不包含该数据，这时若指定了默认值参数则返回默认值，否则返回undefined。</p>\n<p>返回的数据可能是任意数据类型，这取决于使用<code>Storage.put</code>保存该键值的数据时的数据类型。</p>\n"
        },
        {
          "textRaw": "Storage.put(key, value)",
          "type": "method",
          "name": "put",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} 键值 ",
                  "name": "key",
                  "type": "string",
                  "desc": "键值"
                },
                {
                  "textRaw": "`value` {any} 值 ",
                  "name": "value",
                  "type": "any",
                  "desc": "值"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                },
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>把值value保存到本地存储中。value可以是undefined以外的任意数据类型。如果value为undefined则抛出TypeError。</p>\n<p>存储的过程实际上是使用JSON.stringify把value转换为字符串再保存，因此value必须是可JSON化的才能被接受。</p>\n"
        },
        {
          "textRaw": "Storage.remove(key)",
          "type": "method",
          "name": "remove",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} 键值 ",
                  "name": "key",
                  "type": "string",
                  "desc": "键值"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>移除键值为key的数据。不返回任何值。</p>\n"
        },
        {
          "textRaw": "Storage.contains(key)",
          "type": "method",
          "name": "contains",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} 键值 ",
                  "name": "key",
                  "type": "string",
                  "desc": "键值"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>返回该本地存储是否包含键值为key的数据。是则返回true，否则返回false。</p>\n"
        },
        {
          "textRaw": "Storage.clear()",
          "type": "method",
          "name": "clear",
          "desc": "<p>移除该本地存储的所有数据。不返回任何值。</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Storages"
    }
  ]
}